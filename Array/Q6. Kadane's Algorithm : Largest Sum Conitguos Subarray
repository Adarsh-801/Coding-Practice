Given an array Arr[] of N integers. Find the contiguous sub-array(containing at least one number) which has the maximum sum and return its sum.

Input:
N = 5
Arr[] = {1,2,3,-2,5}
Output:
9                 Explanation: Max subarray sum is 9 of elements (1, 2, 3, -2, 5) which is a contiguous subarray.


Input:
N = 4
Arr[] = {-1,-2,-3,-4}
Output:
-1                Explanation: Max subarray sum is -1 of element (-1)

Your Task:
You don't need to read input or print anything. The task is to complete the function maxSubarraySum() which takes Arr[]
and N as input parameters and returns the sum of subarray with maximum sum.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 106
-107 ≤ A[i] ≤ 107


===================================================================SOLUTION=============================================================
class Solution{

    // arr: input array
    // n: size of array
    //Function to find the sum of contiguous subarray with maximum sum.
    long maxSubarraySum(int arr[], int n){
        
        // Your code here
        int currentSum = arr[0];
        int maxSum = arr[0];
        
        for(int i=1; i<n; i++){
            currentSum = max(arr[i], currentSum+arr[i]);
            maxSum = max(maxSum, currentSum);
        }
        
        return maxSum;
        
    }
    
    public static int max(int a, int b){
        
        if(a>b)
            return a;
           
        else 
            return b;
     }
