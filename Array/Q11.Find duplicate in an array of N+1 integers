Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.
You must solve the problem without modifying the array nums and uses only constant extra space.

Input: nums = [1,3,4,2,2]
Output: 2

Input: nums = [3,1,3,4,2]
Output: 3
 
Constraints:
1 <= n <= 105
nums.length == n + 1
1 <= nums[i] <= n
All the integers in nums appear only once except for precisely one integer which appears two or more times.

===========================================================================================================================================================
                                                    SOLUTION 1 : Runtime = 42ms
===========================================================================================================================================================
import java.util.*;
class Solution {
    public int findDuplicate(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        
        int duplicate = 0;
        for(int i=0;i<n-1;i++){
            if(nums[i]==nums[i+1]){
                duplicate = nums[i];
            }
        }
        
        return duplicate;
    }
}

=======================================================================================================================================================
                                       SOLUTION 2 : Runtime = 6ms (Better Solution)
=======================================================================================================================================================

import java.util.*;
class Solution {
    public int findDuplicate(int[] nums) {
       
        int [] freq = new int[nums.length-1];
        
        for(int i=0;i<nums.length;i++){
            freq[nums[i]-1]++;
        }
        
        for(int i=0;i<freq.length;i++){
            if(freq[i]>1){
                return i+1;
            }
        }
        return -1;
    }
}
